(define (make-matrix rows columns . value)
  (do ((matrix (make-vector rows)) (i 0 ( + i 1)))
      ((= i rows) matrix)
    (vector-set! matrix i
		 (make-vector columns (if (null? value)
					  #f
					  (car value))))))

(define (matrix? matrix)
  (and (vector? matrix)
       (> (vector-length matrix) 0)
       (vector? (vector-ref matrix 0))))

(define (matrix-rows matrix)
  (vector-length matrix))

(define (matrix-columns matrix)
  (vector-length (vector-ref matrix 0)))

(define (matrix-ref matrix i j)
  (vector-ref (vector-ref matrix i) j))

(define (matrix-set! matrix i j value)
  (vector-set! (vector-ref matrix i) j value))

(define (make-matrix-element-function function)
  (lambda (matrix scalar)
    (let* ((rows (matrix-rows matrix))
	 (columns (matrix-columns matrix))
	 (result (make-matrix rows columns)))
    (do ((i 0 (+ i 1)))
	((= i rows) result)
      (do ((j 0 (+ j 1)))
	  ((= j columns))
	(matrix-set! result i j (function scalar (matrix-ref matrix i j))))))))

(define scale (make-matrix-element-function *))

(define (matrix-multiply a b)
  (let* ((rows (matrix-rows a))
	 (columns (matrix-columns b))
	 (result (make-matrix rows columns)))
    (do ((i 0 (+ i 1)))
	((= i rows) result)
      (do ((j 0 (+ j 1)))
	  ((= j columns))
	(matrix-set! result i j (* (matrix-ref a j i) (matrix-ref b i j)))))))

(define (print text)
  (write text)
  (newline))

(define (test)
  (define a (make-matrix 3 3 0))
  (define b (make-matrix 3 4 0))
  (define c (make-matrix 3 3 0))
  (matrix-set! a 0 0 1)
  (matrix-set! a 2 2 1)
  (matrix-set! b 0 0 2)
  (matrix-set! b 1 1 2)
  (matrix-set! b 2 2 0)
  (set! c (matrix-multiply a b))
  (print a)
  (print b)
  (print c)
  )

;; (define scale (matrix scalar)
;;   (let* ((rows (matrix-rows matrix))
;; 	 (columns (matrix-columns matrix))
;; 	 (result (make-matrix rows columns)))
;;     (do ((i 0 (+ i 1)))
;; 	((= i rows) result)
;;       (do ((j 0 (+ j 1)))
;; 	  ((= j columns))
;; 	(matrix-set! result i j (* scalar (matrix-ref matrix i j)))))))
